generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// USER MODEL
model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  userSubscription UserSubscription? @relation("UserToUserSubscription")
  workspaces     Workspace[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  role           String           @default("user") // "admin", "member"
  teamUsers      TeamUser[]       // Explicit relation table

  @@map("users")
}

// USER-SUBSCRIPTION MODEL (per-user workspace limits)
model UserSubscription {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation("UserToUserSubscription", fields: [userId], references: [id])
  userId         String   @unique @db.ObjectId
  plan           String
  workspaceLimit Int      @default(3)  // Free plan allows 3 workspaces
  status         String   @default("active")
  startDate      DateTime @default(now())
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// WORKSPACE MODEL (per-workspace project limits and subscription)
model Workspace {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  workspaceType    String      // "personal" or "shared"
  createdBy        String      @db.ObjectId
  user             User        @relation(fields: [createdBy], references: [id])
  subscriptionPlan String      @default("free") // "free", "pro", etc
  projectLimit     Int         @default(5) // Free plan allows 5 projects
  subscriptionEnd  DateTime?
  projects         Project[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

// PROJECT MODEL
model Project {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  status         String       @default("active")
  userId         String       @db.ObjectId
  workspaceId    String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  workspace      Workspace    @relation(fields: [workspaceId], references: [id])
  branches       Branch[]
  secrets        Secret[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  teamProjects   TeamProject[]
}

// BRANCH MODEL
model Branch {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  createdBy    String    @db.ObjectId
  projectId    String    @db.ObjectId 
  project      Project   @relation(fields: [projectId], references: [id])
  secrets      Secret[]  @relation("BranchToSecret")
  versionNo    String
  permissions  String[]  // Roles/User IDs
  createdAt    DateTime  @default(now())
}

// SECRET MODEL
model Secret {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  key              String
  value            String
  description      String
  environmentType  String
  version          String
  projectId        String    @db.ObjectId
  branchId         String?   @db.ObjectId
  project          Project   @relation(fields: [projectId], references: [id])
  branch           Branch?   @relation("BranchToSecret", fields: [branchId], references: [id])
  type             String
  history          Json      // Array of secret versions
  lastUpdated      DateTime  @updatedAt
  updatedBy        String    // userId
  permission       String[]  // Roles/User IDs
  expiryDate       DateTime?
  rotationPolicy   String    // "auto", "manual", etc.
}

// TEAM-RELATED MODELS
model Team {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  createdAt      DateTime      @default(now())
  teamColor      String
  members        TeamUser[]    // User-Team relation
  teamProjects   TeamProject[] // Team-Project relation
  roles          String[]      // Roles/permissions per user
  createdBy      String        @db.ObjectId
}

// Many-to-Many Team-User
model TeamUser {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String   @db.ObjectId
  userId   String   @db.ObjectId
  role     String   // e.g. "owner", "member"
  status   String   @default("pending") // "active", "pending", "removed"
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

// Many-to-Many Team-Project
model TeamProject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String   @db.ObjectId
  projectId String   @db.ObjectId
  team      Team     @relation(fields: [teamId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([teamId, projectId])
}

// AUTHENTICATION MODELS
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
