generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  role          String     @default("user") // e.g. "admin", "member"
  teamUsers     TeamUser[] // Explicit relation table

  @@map("users")
}

model Team {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  createdAt    DateTime      @default(now())
  members      TeamUser[] // Explicit relation table
  teamProjects TeamProject[] // Explicit relation table
  roles        String[] // array of roles/permissions per user
}

// Explicit relation table for User-Team many-to-many
model TeamUser {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String   @db.ObjectId
  userId   String   @db.ObjectId
  role     String // User's role in this specific team
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

// Explicit relation table for Team-Project many-to-many
model TeamProject {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String  @db.ObjectId
  projectId String  @db.ObjectId
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([teamId, projectId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  status       String        @default("active")
  userId       String        @db.ObjectId
  branch       Branch[]
  user         User          @relation(fields: [userId], references: [id])
  secret       Secret[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  teamProjects TeamProject[] // Explicit relation table
}

model Branch {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String               
  createdBy   String   @db.ObjectId
  projectId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  secret      Secret[] @relation("BranchToSecret")
  versionNo   String
  permissions String[] // array of roles/user IDs
}

model Secret {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  key              String
  value            String
  description      String
  environment_type String
  version          String
  projectId        String    @db.ObjectId
  branchId         String?   @db.ObjectId
  project          Project   @relation(fields: [projectId], references: [id])
  branch           Branch?   @relation("BranchToSecret", fields: [branchId], references: [id])
  type             String    
  history          Json // JSON array of secret versions
  lastUpdated      DateTime  @updatedAt
  updatedBy        String // userId
  permission       String[] // array of roles/user IDs
  expiryDate       DateTime?
  rotationPolicy   String // e.g. "auto", "manual", "interval"
}
